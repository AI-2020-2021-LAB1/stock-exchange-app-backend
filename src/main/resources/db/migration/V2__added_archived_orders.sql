CREATE TABLE ARCHIVED_ORDERS
(
    ID       bigint PRIMARY KEY,
    USER_ID  bigint NOT NULL,
    STOCK_ID bigint NOT NULL,
	AMOUNT int NOT NULL,
	REMAINING_AMOUNT int NOT NULL,
	TYPE varchar(255) NOT NULL,
	PRICE_TYPE varchar(255) NOT NULL,
	PRICE decimal NOT NULL,
	DATE_CREATION timestamp NOT NULL,
	DATE_EXPIRATION timestamp NOT NULL,
	DATE_CLOSING timestamp
);

ALTER TABLE TRANSACTIONS DROP CONSTRAINT TRANSACTIONS_BUYING_ORDER_ID_FKEY;
ALTER TABLE TRANSACTIONS DROP CONSTRAINT TRANSACTIONS_SELLING_ORDER_ID_FKEY;

INSERT INTO ARCHIVED_ORDERS (ID, USER_ID, STOCK_ID, AMOUNT, REMAINING_AMOUNT, TYPE, PRICE_TYPE, PRICE,
                             DATE_CREATION, DATE_EXPIRATION, DATE_CLOSING)
    SELECT o.ID, o.USER_ID, o.STOCK_ID, o.AMOUNT, o.REMAINING_AMOUNT, o.TYPE, o.PRICE_TYPE, o.PRICE,
           o.DATE_CREATION, o.DATE_EXPIRATION, o.DATE_CLOSING
    FROM ORDERS as o
        WHERE o.DATE_EXPIRATION <= now() OR o.DATE_CLOSING <= now() OR o.AMOUNT != o.REMAINING_AMOUNT;

DELETE FROM ORDERS
    WHERE DATE_EXPIRATION <= now() OR DATE_CLOSING <= now();

UPDATE ARCHIVED_ORDERS
    SET DATE_CLOSING = now()
    WHERE DATE_EXPIRATION <= now() AND DATE_CLOSING IS NULL;

ALTER TABLE TRANSACTIONS ADD CONSTRAINT TRANSACTIONS_BUYING_ORDER_ID_FKEY
    FOREIGN KEY (BUYING_ORDER_ID) REFERENCES ARCHIVED_ORDERS (ID);
ALTER TABLE TRANSACTIONS ADD CONSTRAINT TRANSACTIONS_SELLING_ORDER_ID_FKEY
    FOREIGN KEY (SELLING_ORDER_ID) REFERENCES ARCHIVED_ORDERS (ID);
